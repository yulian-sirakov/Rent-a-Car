@page "/Cars/edit"
@inject DataLayer.Common.RentACarDbContext DB
@using Bussines_Layer.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Car</h4>
<hr />
@if (Car is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Car" OnValidSubmit="UpdateCar" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Car.Id" value="@Car.Id" />
                <div class="mb-3">
                    <label for="brand" class="form-label">Brand:</label>
                    <InputText id="brand" @bind-Value="Car.Brand" class="form-control" />
                    <ValidationMessage For="() => Car.Brand" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="model" class="form-label">Model:</label>
                    <InputText id="model" @bind-Value="Car.Model" class="form-control" />
                    <ValidationMessage For="() => Car.Model" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="year" class="form-label">Year:</label>
                    <InputNumber id="year" @bind-Value="Car.Year" class="form-control" />
                    <ValidationMessage For="() => Car.Year" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dailyrent" class="form-label">DailyRent:</label>
                    <InputNumber id="dailyrent" @bind-Value="Car.DailyRent" class="form-control" />
                    <ValidationMessage For="() => Car.DailyRent" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Car.Description" class="form-control" />
                    <ValidationMessage For="() => Car.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isreserved" class="form-label">IsReserved:</label>
                    <InputCheckbox id="isreserved" @bind-Value="Car.IsReserved" class="form-check-input" />
                    <ValidationMessage For="() => Car.IsReserved" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="carcategoryid" class="form-label">CarCategoryId:</label>
                    <InputNumber id="carcategoryid" @bind-Value="Car.CarCategoryId" class="form-control" />
                    <ValidationMessage For="() => Car.CarCategoryId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/cars">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Car? Car { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Car ??= await DB.Cars.FirstOrDefaultAsync(m => m.Id == Id);

        if (Car is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateCar()
    {
        DB.Attach(Car!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CarExists(Car!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/cars");
    }

    bool CarExists(int id)
    {
        return DB.Cars.Any(e => e.Id == id);
    }
}
